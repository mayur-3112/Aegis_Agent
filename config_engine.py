# -*- coding: utf-8 -*-
"""config_engine

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Ik_ixkoAQ5Np15avc5Z8JBbzKF8YKV4
"""

import os
import json
import fnmatch
import shutil

def get_file_list(config_path: str) -> list[str]:
    """
    Reads a configuration file to determine which files to scan based on
    inclusion paths and exclusion patterns.

    Args:
        config_path: The absolute path to the config.json file.

    Returns:
        A list of absolute file paths that should be scanned.
    """
    files_to_scan = []

    # --- 1. Read and parse the config.json file ---
    try:
        with open(config_path, 'r') as f:
            config = json.load(f)
    except FileNotFoundError:
        print(f"[ERROR] Config file not found at: {config_path}")
        return []
    except json.JSONDecodeError:
        print(f"[ERROR] Could not parse config file. Invalid JSON in: {config_path}")
        return []
    except Exception as e:
        print(f"[ERROR] An unexpected error occurred while reading config: {e}")
        return []

    include_paths = config.get("include_paths", [])
    exclude_patterns = config.get("exclude_patterns", [])

    # Separate exclusion patterns for efficiency
    dir_excludes = [os.path.abspath(p) for p in exclude_patterns if p.endswith('/')]
    file_excludes = [p for p in exclude_patterns if not p.endswith('/')]

    # --- 2. Recursively walk through each directory in include_paths ---
    for path in include_paths:
        # Ensure the path is absolute for reliable comparisons
        abs_path = os.path.abspath(path)

        if not os.path.isdir(abs_path):
            print(f"[WARN] Included path is not a valid directory, skipping: {abs_path}")
            continue

        try:
            for root, _, filenames in os.walk(abs_path, topdown=True):
                current_abs_root = os.path.abspath(root)

                # --- 3. Check if the current directory is excluded ---
                is_excluded_dir = any(current_abs_root.startswith(excluded_dir) for excluded_dir in dir_excludes)
                if is_excluded_dir:
                    # By using topdown=True in os.walk, we can prune the search
                    # and not descend into excluded directories.
                    # Note: Modifying 'dirnames' in os.walk is the canonical way,
                    # but for clarity, we just skip processing files here.
                    continue

                for filename in filenames:
                    # Check if the filename itself matches an exclusion pattern
                    is_excluded_file = any(fnmatch.fnmatch(filename, pattern) for pattern in file_excludes)
                    if is_excluded_file:
                        continue

                    # If not excluded, add its absolute path to our list
                    file_path = os.path.join(current_abs_root, filename)
                    files_to_scan.append(file_path)

        # --- 4. Handle errors gracefully ---
        except PermissionError:
            print(f"[WARN] Permission denied to access: {abs_path}. Skipping this path.")
        except Exception as e:
            print(f"[ERROR] An unexpected error occurred while walking {abs_path}: {e}")

    return files_to_scan

# --- Main block to demonstrate and test the function ---
if __name__ == "__main__":
    print("--- [Aegis Discovery Engine Test] ---")

    # Create a temporary directory structure for a reliable test
    TEST_DIR = "aegis_test_fs"
    if os.path.exists(TEST_DIR):
        shutil.rmtree(TEST_DIR)
    os.makedirs(os.path.join(TEST_DIR, "etc/important"), exist_ok=True)
    os.makedirs(os.path.join(TEST_DIR, "etc/unimportant"), exist_ok=True)
    os.makedirs(os.path.join(TEST_DIR, "var/www/html"), exist_ok=True)
    os.makedirs(os.path.join(TEST_DIR, "var/logs"), exist_ok=True)

    # Create dummy files
    open(os.path.join(TEST_DIR, "etc/important/config.conf"), 'w').close()
    open(os.path.join(TEST_DIR, "etc/unimportant/temporary.txt"), 'w').close()
    open(os.path.join(TEST_DIR, "var/www/html/index.html"), 'w').close()
    open(os.path.join(TEST_DIR, "var/www/html/script.js.tmp"), 'w').close()
    open(os.path.join(TEST_DIR, "var/logs/access.log"), 'w').close()

    # Create a temporary config file for the test
    test_config_path = "test_config.json"
    test_config_data = {
        "include_paths": [
            os.path.join(TEST_DIR, "etc/"),
            os.path.join(TEST_DIR, "var/www/")
        ],
        "exclude_patterns": [
            "*.log",
            "*.tmp",
            os.path.join(TEST_DIR, "etc/unimportant/")
        ]
    }
    with open(test_config_path, 'w') as f:
        json.dump(test_config_data, f, indent=2)

    print(f"Created temporary file system at: ./{TEST_DIR}")
    print(f"Using test config file: ./{test_config_path}\n")

    # Run the discovery engine
    files = get_file_list(test_config_path)

    print("--- [Discovery Results] ---")
    if files:
        for f in sorted(files):
            print(f"  [+] Scan: {f}")
    else:
        print("No files marked for scanning.")

    print("\n--- [Expected Outcome Analysis] ---")
    print("Should find 'config.conf' and 'index.html'.")
    print("Should EXCLUDE 'temporary.txt' (due to directory exclusion).")
    print("Should EXCLUDE 'script.js.tmp' and 'access.log' (due to file pattern exclusion).")


    # Clean up test files and directories
    os.remove(test_config_path)
    shutil.rmtree(TEST_DIR)
    print("\n--- [Test Cleanup Complete] ---")